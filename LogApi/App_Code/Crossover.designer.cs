#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LogApi.App_Code
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Crossover")]
	public partial class CrossoverDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertapplication(application instance);
    partial void Updateapplication(application instance);
    partial void Deleteapplication(application instance);
    partial void Insertlog(log instance);
    partial void Updatelog(log instance);
    partial void Deletelog(log instance);
    #endregion
		
		public CrossoverDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CrossoverConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CrossoverDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CrossoverDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CrossoverDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CrossoverDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<application> applications
		{
			get
			{
				return this.GetTable<application>();
			}
		}
		
		public System.Data.Linq.Table<log> logs
		{
			get
			{
				return this.GetTable<log>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.application")]
	public partial class application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _application_id;
		
		private string _display_name;
		
		private string _secret;
		
		private EntitySet<log> _logs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onapplication_idChanging(string value);
    partial void Onapplication_idChanged();
    partial void Ondisplay_nameChanging(string value);
    partial void Ondisplay_nameChanged();
    partial void OnsecretChanging(string value);
    partial void OnsecretChanged();
    #endregion
		
		public application()
		{
			this._logs = new EntitySet<log>(new Action<log>(this.attach_logs), new Action<log>(this.detach_logs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_application_id", DbType="VarChar(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string application_id
		{
			get
			{
				return this._application_id;
			}
			set
			{
				if ((this._application_id != value))
				{
					this.Onapplication_idChanging(value);
					this.SendPropertyChanging();
					this._application_id = value;
					this.SendPropertyChanged("application_id");
					this.Onapplication_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_display_name", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string display_name
		{
			get
			{
				return this._display_name;
			}
			set
			{
				if ((this._display_name != value))
				{
					this.Ondisplay_nameChanging(value);
					this.SendPropertyChanging();
					this._display_name = value;
					this.SendPropertyChanged("display_name");
					this.Ondisplay_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_secret", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string secret
		{
			get
			{
				return this._secret;
			}
			set
			{
				if ((this._secret != value))
				{
					this.OnsecretChanging(value);
					this.SendPropertyChanging();
					this._secret = value;
					this.SendPropertyChanged("secret");
					this.OnsecretChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="application_log", Storage="_logs", ThisKey="application_id", OtherKey="application_id")]
		public EntitySet<log> logs
		{
			get
			{
				return this._logs;
			}
			set
			{
				this._logs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_logs(log entity)
		{
			this.SendPropertyChanging();
			entity.application = this;
		}
		
		private void detach_logs(log entity)
		{
			this.SendPropertyChanging();
			entity.application = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[log]")]
	public partial class log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _log_id;
		
		private string _logger;
		
		private string _level;
		
		private string _message;
		
		private string _application_id;
		
		private EntityRef<application> _application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onlog_idChanging(int value);
    partial void Onlog_idChanged();
    partial void OnloggerChanging(string value);
    partial void OnloggerChanged();
    partial void OnlevelChanging(string value);
    partial void OnlevelChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void Onapplication_idChanging(string value);
    partial void Onapplication_idChanged();
    #endregion
		
		public log()
		{
			this._application = default(EntityRef<application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_log_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int log_id
		{
			get
			{
				return this._log_id;
			}
			set
			{
				if ((this._log_id != value))
				{
					this.Onlog_idChanging(value);
					this.SendPropertyChanging();
					this._log_id = value;
					this.SendPropertyChanged("log_id");
					this.Onlog_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logger", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string logger
		{
			get
			{
				return this._logger;
			}
			set
			{
				if ((this._logger != value))
				{
					this.OnloggerChanging(value);
					this.SendPropertyChanging();
					this._logger = value;
					this.SendPropertyChanged("logger");
					this.OnloggerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[level]", Storage="_level", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="VarChar(2048) NOT NULL", CanBeNull=false)]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_application_id", DbType="VarChar(32)")]
		public string application_id
		{
			get
			{
				return this._application_id;
			}
			set
			{
				if ((this._application_id != value))
				{
					if (this._application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onapplication_idChanging(value);
					this.SendPropertyChanging();
					this._application_id = value;
					this.SendPropertyChanged("application_id");
					this.Onapplication_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="application_log", Storage="_application", ThisKey="application_id", OtherKey="application_id", IsForeignKey=true, DeleteRule="CASCADE")]
		public application application
		{
			get
			{
				return this._application.Entity;
			}
			set
			{
				application previousValue = this._application.Entity;
				if (((previousValue != value) 
							|| (this._application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._application.Entity = null;
						previousValue.logs.Remove(this);
					}
					this._application.Entity = value;
					if ((value != null))
					{
						value.logs.Add(this);
						this._application_id = value.application_id;
					}
					else
					{
						this._application_id = default(string);
					}
					this.SendPropertyChanged("application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
